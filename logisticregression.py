# -*- coding: utf-8 -*-
"""LogisticRegression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qGDJLQBsR2SlyBoE8-xCguNbCq5SE19_
"""

#Loading important packages
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

#Loading csv file
data= pd.read_csv("Churn__Modelling.csv")
data

df = data[["CreditScore", "Age","Tenure", "Balance","NumOfProducts","EstimatedSalary","Exited"]]
df.columns = ["CreditScore", "Age", "Tenure", "Balance", "NumOfProducts","EstimatedSalary","Exited"]
df

df.info()

df.dropna(subset = ["Age"], inplace = True) #To remove records where there are NULL values in age column
df.info()

x= df.iloc[:,[0,1,2,3,4,5]].values  #Independent variales
y = df.iloc[:,6].values  #Dependent variables

from sklearn.model_selection import train_test_split as tts
x_train,x_test, y_train, y_test = tts(x,y, test_size = 0.20, random_state=0)

from sklearn.preprocessing import StandardScaler
SS= StandardScaler()
x_strain = SS.fit_transform(x_train)
x_stest = SS.transform(x_test)

from sklearn.linear_model import LogisticRegression
LRO= LogisticRegression()
LRO.fit(x_strain,y_train)
y_predtrain = LRO.predict(x_strain)
y_predtest= LRO.predict(x_stest)

#Confusion Matrix for training data
#6126+98= 6224 data records predicted correctly out of 8000 records
from sklearn.metrics import confusion_matrix
cmtrain= confusion_matrix(y_train, y_predtrain)
cmtrain

#Confusion Matrix for test data
#1554+21= 1575 data predicted correctly out of 2001 records
from sklearn.metrics import confusion_matrix
cmtest= confusion_matrix(y_test, y_predtest)
cmtest

#Getting output for a random input
#CreditScore= 700, Age=43, Tenure= 1, Bank balance = 87695, Number of Products used= 2, EstimatedSalary= 124000
LRO.predict([[250, 50, 5, 50000, 2, 1000000]])

#Output significance: Customer has exited

#Finding the intercepts and coefficients for the logistic regression model
intercept= LRO.intercept_[0]
print(intercept)
coefficients= LRO.coef_
print(coefficients)
x1,x2,x3,x4,x5,x6= LRO.coef_[0][0], LRO.coef_[0][1],LRO.coef_[0][2],LRO.coef_[0][3],LRO.coef_[0][4],LRO.coef_[0][5]
print(x1,x2,x3,x4,x5,x6)

import math

#Creating functions to label each row of record as 0 or 1
def sigmoid(x):
  return 1 / (1 + np.exp(-x))

results = []
wt_sum= []
outputforgraph=[]
def eqn(list1):
  left=0
  stay=0
  for sublist in list1:
    weighted_sum = intercept + np.dot(sublist, coefficients[0])
    output = sigmoid(weighted_sum)
    outputforgraph.append(output)
    wt_sum.append(weighted_sum)
    if(output>=0.5):
      left= left+1
    else:
      stay=stay+1
    results.append(1 if output>=0.5 else 0)
  print(results)
  print(stay," stayed")
  print(left," left")
eqn(x_strain)
eqn(x_stest)

#Plotting
plt.scatter(wt_sum, results)
plt.ylabel("1 for LEFT, 0 for STAY")
plt.xlabel("Weighted Sum Score")
plt.show()